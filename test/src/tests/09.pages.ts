import { expect } from 'chai'
import { query } from '../common'

describe('pages', () => {
  it.skip('should get pages, filtered by activePagetree', async () => {})
  it.skip('should get pages, filtered by assetKeysReferenced', async () => {})
  it('should get deleted pages', async () => {
    const resp = await query('{ pages(filter: {deleted: true}) { id name } }')
    const pageNames = resp.data.pages.map((p: any) => p.name)
    expect(pageNames).to.contain('events')
    expect(pageNames).to.not.contain('root')
  })
  it('should get undeleted pages', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { id name } }')
    const pageNames = resp.data.pages.map((p: any) => p.name)
    expect(pageNames).to.not.contain('events')
    expect(pageNames).to.contain('about')
  })
  it.skip('should get pages, filtered by ID', async () => {})
  it.skip('should get pages, filtered by linkId', async () => {})
  it.skip('should get pages, filtered by linkIdsReferenced', async () => {})
  it.skip('should get pages, filtered by "live" property', async () => {})
  it.skip('should get pages, filtered by pageTreeId', async () => {})
  it.skip('should get pages, filtered by parentPageId', async () => {})
  it.skip('should get pages, filtered by "published" property', async () => {})
  it.skip('should get pages, filtered by referencedByPageIds', async () => {})
  it.skip('should get pages, filtered by site ID', async () => {})
  it.skip('should get pages using specific templates', async () => {})
  it('should get the ancestors for a page', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { name ancestors { id name } } }')
    const peoplePage = resp.data.pages.find((p: any) => p.name === 'people')
    const peoplePageAncestors = peoplePage.ancestors.map((a: any) => a.name)
    expect(peoplePageAncestors).to.contain('root')
    expect(peoplePageAncestors).to.contain('about')
    const gradPage = resp.data.pages.find((p: any) => p.name === 'grad')
    const gradPageAncestors = gradPage.ancestors.map((a: any) => a.name)
    expect(gradPageAncestors).to.contain('programs')
    expect(gradPageAncestors).to.contain('root')
  })
  it('should return an empty array for the ancestors of a root page', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { name ancestors { id name } } }')
    const rootPage = resp.data.pages.find((p: any) => p.name === 'root')
    expect(rootPage.ancestors.length).to.equal(0)
  })
  it('should get a page\'s direct children', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { name children { id name } } }')
    const rootPage = resp.data.pages.find((p: any) => p.name === 'root')
    const rootPageChildren = rootPage.children.map((p: any) => p.name)
    expect(rootPageChildren).to.contain('about')
    expect(rootPageChildren).to.contain('programs')
    expect(rootPageChildren).to.contain('contact')
  })
  it('should recursively get a page\'s descendents', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { name children(recursive:true) { id name } } }')
    const rootPage = resp.data.pages.find((p: any) => p.name === 'root')
    const rootPageDescendents = rootPage.children.map((p: any) => p.name)
    expect(rootPageDescendents).to.contain('about')
    expect(rootPageDescendents).to.contain('people')
    expect(rootPageDescendents).to.contain('staff')
  })
  it.skip('should return a page\'s creation datetime', async () => {})
  it.skip('should return the user who created a page', async () => {})
  it.skip('should return the data for a page (no arguments)', async () => {})
  it.skip('should return the published version of data for a page', async () => {})
  it.skip('should return the data for a page, specifying schema version', async () => {})
  it.skip('should return the specified version of data for a page', async () => {})
  it.skip('should return the deleted field for a page', async () => {})
  it('should return a deleted page\'s deletion datetime', async () => {
    const resp = await query('{ pages(filter: {deleted: true}) { name deletedAt } }')
    const eventsPage = resp.data.pages.find((p: any) => p.name === 'events')
    expect(eventsPage.deletedAt).to.not.equal(null)
  })
  it('should return null for a non-deleted page\'s deletion datetime', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { name deletedAt } }')
    const staffPage = resp.data.pages.find((p: any) => p.name === 'staff')
    expect(staffPage.deletedAt).to.equal(null)
  })
  it('should return the user who deleted a deleted page', async () => {
    const resp = await query('{ pages(filter: {deleted: true}) { name deletedBy { id name } } }')
    const eventsPage = resp.data.pages.find((p: any) => p.name === 'events')
    expect(eventsPage.deletedBy.id).to.equal('su01')
  })
  it('should return null for deletedBy if the page is not deleted', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { name deletedBy { id name } } }')
    const staffPage = resp.data.pages.find((p: any) => p.name === 'staff')
    expect(staffPage.deletedBy).to.equal(null)
  })
  it('should return a page\'s linkId', async () => {
    const resp = await query('{ pages(filter: {deleted: false}) { id name linkId } }')
    const staffPage = resp.data.pages.find((p: any) => p.name === 'staff')
    expect(staffPage.linkId.length).to.be.greaterThan(0)
  })
  it.skip('should return whether or not a page is live', async () => {})
  it.skip('should return the last modified datetime for a page', async () => {})
  it.skip('should return the user who last modified a page', async () => {})
})
