import { expect } from 'chai'
import { query } from '../common'

describe('pages', () => {
  it.skip('should get pages, filtered by activePagetree', async () => {})
  it.skip('should get pages, filtered by assetKeysReferenced', async () => {})
  it.skip('should get deleted pages', async () => {})
  it.skip('should get undeleted pages', async () => {})
  it.skip('should get pages, filtered by ID', async () => {})
  it.skip('should get pages, filtered by linkId', async () => {})
  it.skip('should get pages, filtered by linkIdsReferenced', async () => {})
  it.skip('should get pages, filtered by "live" property', async () => {})
  it.skip('should get pages, filtered by pageTreeId', async () => {})
  it.skip('should get pages, filtered by parentPageId', async () => {})
  it.skip('should get pages, filtered by "published" property', async () => {})
  it.skip('should get pages, filtered by referencedByPageIds', async () => {})
  it.skip('should get pages, filtered by site ID', async () => {})
  it.skip('should get pages using specific templates', async () => {})
  it.skip('should get the ancestors for a page', async () => {})
  it.skip('should return an empty array for te ancestors of a root page', async () => {})
  it.skip('should get a page\'s direct children', async () => {})
  it.skip('should recursively get a page\'s descendents', async () => {})
  it.skip('should return a page\'s creation datetime', async () => {})
  it.skip('should return the user who created a page', async () => {})
  it.skip('should return the data for a page (no arguments)', async () => {})
  it.skip('should return the published version of data for a page', async () => {})
  it.skip('should return the data for a page, specifying schema version', async () => {})
  it.skip('should return the specified version of data for a page', async () => {})
  it.skip('should return the deleted field for a page', async () => {})
  it.skip('should return a deleted page\'s deletion datetime', async () => {})
  it.skip('should return null for a non-deleted page\'s deletion datetime', async () => {})
  it.skip('should return the user who deleted a deleted page', async () => {})
  it.skip('should return null for deletedBy if the page is not deleted', async () => {})
  it.skip('should return a page\'s linkId', async () => {})
  it.skip('should return whether or not a page is live', async () => {})
  it.skip('should return the last modified datetime for a page', async () => {})
  it.skip('should return the user who last modified a page', async () => {})
})
